# -*- coding: utf-8 -*-
"""mel833.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vi2Z-xjU-sHahBB1RVmadb3Ns4JjJ5KU
"""

from google.colab import drive
drive.mount("/content/drive/")

from tensorflow.keras.models import Sequential,Model
from tensorflow.keras.layers import Conv2D,MaxPool2D,Flatten,Dense,Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
print(os.listdir('/content/drive/My Drive/Melanoma/DermMel/'))

train_mel = os.listdir('/content/drive/My Drive/Melanoma/DermMel/train_sep/Melanoma')
mel_img = plt.imread("/content/drive/My Drive/Melanoma/DermMel/train_sep/Melanoma/" + train_mel[0])
mel_img.shape

mel_img.max()

mel_img.min()

plt.imshow(mel_img)

datagen = ImageDataGenerator(rescale=1./255,
                                      zoom_range=0.2,
                                      horizontal_flip=True,
                                      vertical_flip=True,
                                      width_shift_range=0.2,
                                      height_shift_range=0.2)
train_data = datagen.flow_from_directory('/content/drive/My Drive/Melanoma/DermMel/train_sep/',
                                                     target_size=(128,128),
                                                     batch_size=32,
                                                     shuffle=True,
                                                     class_mode = 'binary')

validation_data = datagen.flow_from_directory('/content/drive/My Drive/Melanoma/DermMel/valid/',
                                                     target_size=(128,128),
                                                     batch_size=32,
                                                     shuffle=True,
                                                     class_mode = 'binary')

plt.imshow(datagen.random_transform(mel_img))

#accuracies_ =[]

def train(train_data,validation_data,optimizer,name,epochs=30):
    classifier = Sequential([Conv2D(16,(3,3),input_shape=(128,128,3),activation='relu'),
                        MaxPool2D(2,2),
                        #2nd conv
                        Conv2D(32,(3,3),activation='relu'),
                        MaxPool2D(2,2),
                        #Dropout(0.1),
                        #3rd conv
                        Conv2D(64,(3,3),activation='relu'),
                        MaxPool2D(2,2),
                        #Dropout(0.1),
                        #4th conv
                        Conv2D(128,(3,3),activation='relu'),
                        MaxPool2D(2,2),
                        #Dropout(0.1),
                        
                        Flatten(),
                        Dense(1024,activation='relu'),
                        Dropout(0.2),
                        Dense(512,activation='relu'),
                        Dense(1,activation='sigmoid')])

    classifier.compile(optimizer=optimizer,loss='binary_crossentropy',metrics=['accuracy'])
    
    history = classifier.fit(train_data,
                         steps_per_epoch = 100,
                         epochs = epochs,
                         validation_data=validation_data,
                         validation_steps = 10,
                         verbose=1)  
    return classifier,history

from tensorflow.keras.optimizers import Adam,SGD,RMSprop
#Adam
adam_classifier,history = train(train_data,validation_data,Adam(),name='Adam',epochs=25)

acc = history.history["accuracy"]
loss = history.history["loss"]

val_acc = history.history["val_accuracy"]
val_loss = history.history["val_loss"]

plt.figure(figsize=(8,8))
plt.subplot(2,1,1)
plt.plot(acc,label="Training accuracy")
plt.plot(val_acc, label="Validation Accuracy")
plt.legend()
plt.ylabel("Accuracy", fontsize=12)
plt.title("Training and Validation Accuracy", fontsize=12)
plt.show()
plt.figure(figsize=(8,8))
plt.subplot(2,1,1)
plt.plot(loss, label="Training Loss")
plt.plot(val_loss, label = "Validation Loss")
plt.legend()
plt.ylabel("Loss", fontsize=12)
plt.title("Training and Validation Loss",fontsize=12)
plt.show()

test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
        '/content/drive/My Drive/Melanoma/DermMel/test/',target_size=(128, 128),
        batch_size=32,
        shuffle=True,
        class_mode='binary')
adam_classifier.evaluate(test_generator)

import numpy as np
classes = ['Melanoma', 'Not Melanoma']
import PIL
image=PIL.Image.open('/content/drive/My Drive/work/test/pos/pos1111.jpg')
image=image.resize((128,128))
#img=x_test[1]
img=np.array(image).reshape(-1,128,128,3)
img=img.astype('float32')
img /=255.0
result=adam_classifier.predict_classes(img)
print(result[0])
x=result[0]
print(x)
print(classes[int(x[0])])
import PIL
image=PIL.Image.open('/content/drive/My Drive/work/test/neg/neg1111.jpg')
image=image.resize((128,128))
#img=x_test[1]
img=np.asarray(image).reshape(-1,128,128,3)
img=img.astype('float32')
img /=255.0
#print(img)
result=adam_classifier.predict_classes(img)
print(result)
x=result[0]
print(x)
print(classes[int(x[0])])

(adam_classifier.predict_classes(test_generator[0][0]))

ds_model_name = '/content/drive/My Drive/work/mel833.h5'
adam_classifier.save(ds_model_name)
#adam_classifier.save_weights(ds_model_name)